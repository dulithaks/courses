<?php

namespace Tests\Feature;

use Tests\TestCase;
use App\Models\User;
use App\Models\Result;
use App\Models\Course;
use Illuminate\Foundation\Testing\RefreshDatabase;

class ResultsControllerTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        User::factory()->count(10)->create();
        Course::factory()->count(10)->create();
    }

    /** @test */
    public function canUpdate()
    {
        $result = Result::factory()->create(['status' => 0]);
        $response = $this->put('/api/course/result/' . $result->id, ['status' => 1]);
        $response->assertStatus(200);
    }

    /** @test */
    public function canNotUpdate()
    {
        $result = Result::factory()->create(['status' => 0]);
        $response = $this->put('/api/course/result/' . $result->id, ['status' => 10]);
        $response->assertStatus(422);
    }

    /** @test */
    public function canNotUpdateWhenModelNotFound()
    {
        Result::truncate();
        $response = $this->put('/api/course/result/100', ['status' => 1]);
        $response->assertStatus(404);
    }

    /** @test */
    public function canIndex()
    {
        Result::truncate();
        Result::factory()->count(5)->create();

        $response = $this->get('/api/results');
        $response->assertStatus(200);
    }

    /** @test */
    public function canNotStore()
    {
        $response = $this->post('/api/course/assign', []);
        $response->assertStatus(422);
    }

    /** @test */
    public function canStore()
    {
        $user = User::factory()->create();
        $course = Course::factory()->create();

        $response = $this->postJson('/api/course/assign', [
            'user_id' => $user->id,
            'course_id' => $course->id,
            'status' => 1,
        ]);

        $response->assertStatus(201)
            ->assertJson([
                'status' => true,
            ]);
    }
}
